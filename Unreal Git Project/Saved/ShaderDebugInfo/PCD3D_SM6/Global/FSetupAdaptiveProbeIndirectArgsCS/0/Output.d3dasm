;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 547c85e057739d57c29a20704efdf9eb
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:   16
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:   20
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:   24
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:   28
;       uint ScreenProbeDownsampleFactor;             ; Offset:   32
;       uint2 ScreenProbeViewSize;                    ; Offset:   40
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:   48
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:   56
;       float ScreenProbeGatherMaxMip;                ; Offset:   64
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:   68
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:   72
;       float2 SampleRadianceProbeUVMul;              ; Offset:   80
;       float2 SampleRadianceProbeUVAdd;              ; Offset:   88
;       float2 SampleRadianceAtlasUVMul;              ; Offset:   96
;       uint NumUniformScreenProbes;                  ; Offset:  108
;       uint MaxNumAdaptiveProbes;                    ; Offset:  112
;       int FixedJitterIndex;                         ; Offset:  116
;       float OctahedralSolidAngleTextureResolutionSq;; Offset:  288
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   292
;
; }
;
; Resource bind info for NumAdaptiveScreenProbes
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; NumAdaptiveScreenProbes           texture  struct         r/o      T0             t0     1
; RWScreenProbeIndirectArgs             UAV     u32         buf      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWBuffer<unsigned int>" = type { i32 }
%_RootShaderParameters = type { i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, float }

define void @SetupAdaptiveProbeIndirectArgsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 292 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %6 = extractvalue %dx.types.CBufRet.i32 %5, 0
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %9 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %10 = extractvalue %dx.types.CBufRet.i32 %9, 0
  %11 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %12 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %11, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %13 = extractvalue %dx.types.ResRet.i32 %12, 0
  %14 = call i32 @dx.op.binary.i32(i32 40, i32 %13, i32 %10)  ; UMin(a,b)
  %15 = add i32 %8, -1
  %16 = add i32 %15, %14
  %17 = add i32 %16, %6
  %18 = udiv i32 %17, %6
  %19 = and i32 %6, 536870911
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %20, i32 0, i32 undef, i32 %19, i32 %19, i32 %19, i32 %19, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %21 = and i32 %18, 536870911
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %22, i32 1, i32 undef, i32 %21, i32 %21, i32 %21, i32 %21, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %23, i32 2, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %24 = add i32 %6, 7
  %25 = lshr i32 %24, 3
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %26, i32 3, i32 undef, i32 %25, i32 %25, i32 %25, i32 %25, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %27 = add i32 %18, 7
  %28 = lshr i32 %27, 3
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %29, i32 4, i32 undef, i32 %28, i32 %28, i32 %28, i32 %28, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %30, i32 5, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %31 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.i32 %31, 0
  %33 = mul i32 %32, %6
  %34 = mul i32 %32, %18
  %35 = add i32 %33, 7
  %36 = lshr i32 %35, 3
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %37, i32 6, i32 undef, i32 %36, i32 %36, i32 %36, i32 %36, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %38 = add i32 %34, 7
  %39 = lshr i32 %38, 3
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %40, i32 7, i32 undef, i32 %39, i32 %39, i32 %39, i32 %39, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %41, i32 8, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %42 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.i32 %42, 2
  %44 = mul i32 %43, %6
  %45 = mul i32 %43, %18
  %46 = add i32 %44, 7
  %47 = lshr i32 %46, 3
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %48, i32 9, i32 undef, i32 %47, i32 %47, i32 %47, i32 %47, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %49 = add i32 %45, 7
  %50 = lshr i32 %49, 3
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %51, i32 10, i32 undef, i32 %50, i32 %50, i32 %50, i32 %50, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %52, i32 11, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %53 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.i32 %53, 3
  %55 = mul i32 %54, %6
  %56 = mul i32 %54, %18
  %57 = add i32 %55, 7
  %58 = lshr i32 %57, 3
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %59, i32 12, i32 undef, i32 %58, i32 %58, i32 %58, i32 %58, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %60 = add i32 %56, 7
  %61 = lshr i32 %60, 3
  %62 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %62, i32 13, i32 undef, i32 %61, i32 %61, i32 %61, i32 %61, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %63 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %63, i32 14, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %64 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.i32 %64, 1
  %66 = mul i32 %65, %6
  %67 = mul i32 %65, %18
  %68 = add i32 %66, 7
  %69 = lshr i32 %68, 3
  %70 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %70, i32 15, i32 undef, i32 %69, i32 %69, i32 %69, i32 %69, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %71 = add i32 %67, 7
  %72 = lshr i32 %71, 3
  %73 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %73, i32 16, i32 undef, i32 %72, i32 %72, i32 %72, i32 %72, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %74 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %74, i32 17, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.resources = !{!3}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{!"cs", i32 6, i32 6}
!3 = !{!4, !7, !10, null}
!4 = !{!5}
!5 = !{i32 0, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !6}
!6 = !{i32 1, i32 4}
!7 = !{!8}
!8 = !{i32 0, %"class.RWBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 10, i1 false, i1 false, i1 false, !9}
!9 = !{i32 0, i32 5}
!10 = !{!11}
!11 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 292, null}
!12 = !{void ()* @SetupAdaptiveProbeIndirectArgsCS, !"SetupAdaptiveProbeIndirectArgsCS", null, !3, !13}
!13 = !{i32 0, i64 16, i32 4, !14, i32 5, !15}
!14 = !{i32 1, i32 1, i32 1}
!15 = !{i32 0}
